ZGB_PATH_UNIX := $(subst ',,$(subst \,/,'$(ZGB_PATH)'))
ifndef GBDK_HOME
	GBDK_HOME := $(ZGB_PATH_UNIX)/../env/gbdk
	PATH := $(ZGB_PATH_UNIX)/../env/make-3.81-bin/bin;$(ZGB_PATH_UNIX)/../env/gbdk/bin;$(ZGB_PATH_UNIX)/../env/msys/bin;$(PATH)
endif
GBDK_HOME_UNIX := $(subst ',,$(subst \,/,'$(GBDK_HOME)'))

#--- Default build will be release. Can be overiden passing BUILD_TYPE = debug as a parameter
ifndef BUILD_TYPE
	BUILD_TYPE = Release
endif

#--- Default player will be huge tracker HUGETRACKER/GBT_PLAYER
ifeq ($(DEFAULT_SPRITES_SIZE), )
	DEFAULT_SPRITES_SIZE = SPRITES_8x16
endif

ifeq ($(MUSIC_PLAYER), )
	MUSIC_PLAYER = HUGETRACKER
endif

ifndef PORT
	PORT = sm83
endif
ifndef PLAT
	PLAT = gb
endif
ifneq ($(strip $(PORT)),)
	ifneq ($(strip $(PLAT)),)
		TARGET = -m$(PORT):$(PLAT)
	endif
endif

OBJDIR = ../$(BUILD_TYPE)
OBJDIR_RES = ../$(BUILD_TYPE)/res
OBJDIR_ZGB = ../$(BUILD_TYPE)/zgb
BINDIR = ../bin

LCC = $(GBDK_HOME_UNIX)/bin/lcc
SDAR = $(GBDK_HOME_UNIX)/bin/sdar
PNG2ASSET = $(GBDK_HOME_UNIX)/bin/png2asset
BGB = $(ZGB_PATH_UNIX)/../env/bgb/bgb

GBR2C = $(ZGB_PATH_UNIX)/../tools/gbr2c/gbr2c
GBR2PNG = $(ZGB_PATH_UNIX)/../tools/gbr2png/gbr2png
GBM2C = $(ZGB_PATH_UNIX)/../tools/gbm2c/gbm2c
MOD2GBT = $(ZGB_PATH_UNIX)/../env/mod2gbt
UGE2SOURCE = $(ZGB_PATH_UNIX)/../env/uge2source

CFLAGS += $(TARGET) -Wf-MMD $(BUILD_DEFS) -I../include -I$(ZGB_PATH_UNIX)/include -DFILE_NAME=$(basename $(<F))

ifeq ($(strip $(N_BANKS)),)
	NBANKS = A
endif
BINFLAGS += $(TARGET) -Wl-j -Wm-yS -autobank -Wl-yo$(N_BANKS) -Wb-ext=.rel -Wl-g.STACK=0xDF00 -Wl-g_mirror_OAM=0xDF00 -Wl-g_font_recode_table=0xDFA0 -Wb-reserve=1:1000

ifeq ($(wildcard savegame.c), )
	#No savegame
	BINFLAGS += -Wl-yt0x19
else
	#Savegame
	BINFLAGS += -Wl-yt0x1B -Wl-ya1
	CFLAGS += -DUSE_SAVEGAME
endif


ifeq ($(strip $(PLAT)),duck)
	# MegaDuck / Coguar Boy
	EXTENSION = duck
else
	# DMG/Color flags
	EXTENSION = gb
	ifneq (,$(findstring Color,$(BUILD_TYPE)))
		BINFLAGS += -Wm-yc
		CFLAGS += -DCGB
		EXTENSION = gbc
	endif

	# SGB flags
	ifneq ($(wildcard ../res/borders), )
		BINFLAGS +=-Wm-ys 
	endif

	# Analogue pocket
	ifeq ($(strip $(PLAT)),ap)
		EXTENSION = pocket
	endif
endif

# gbt-player/Hugetracker flags
ifeq ($(MUSIC_PLAYER), HUGETRACKER)
	CFLAGS += -DMUSIC_DRIVER_HUGE
else
	CFLAGS += -DMUSIC_DRIVER_GBT
endif

ifeq ($(DEFAULT_SPRITES_SIZE), SPRITES_8x16)
	CFLAGS += -DLCDCF_OBJDEFAULT=LCDCF_OBJ16
	CFLAGSPNG2ASSET += -spr8x16
else
	CFLAGS += -DLCDCF_OBJDEFAULT=LCDCF_OBJ8
	CFLAGSPNG2ASSET += -spr8x8
endif

# Release/Debug flags
ifneq (,$(findstring Debug,$(BUILD_TYPE)))
	CFLAGS += -debug
	BINFLAGS += -debug
	PROJECT_NAME := $(PROJECT_NAME)_Debug
else
	CFLAGS += -Wf'--max-allocs-per-node 50000' -DNDEBUG
endif

current_dir = $(shell pwd)

ASMS_ZGB    = $(foreach dir,$(ZGB_PATH_UNIX)/src,$(notdir $(wildcard $(dir)/*.s)))
CLASSES_ZGB = $(foreach dir,$(ZGB_PATH_UNIX)/src,$(notdir $(wildcard $(dir)/*.c)))
OBJECTS_ZGB = $(foreach dir,$(ZGB_PATH_UNIX)/lib/$(PLAT),$(wildcard $(dir)/*.o))
PLAT_AS_ZGB = $(foreach dir,$(ZGB_PATH_UNIX)/src/$(PLAT),$(notdir $(wildcard $(dir)/*.s)))
PLAT_C_ZGB  = $(foreach dir,$(ZGB_PATH_UNIX)/src/$(PLAT),$(notdir $(wildcard $(dir)/*.c)))
ASMS        = $(foreach dir,.,$(notdir $(wildcard $(dir)/*.s))) 
CLASSES     = $(foreach dir,.,$(notdir $(wildcard $(dir)/*.c))) 
GBRS        = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.gbr)))
GBMS        = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.gbm)))
PNGS        = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.png)))
SPRITES     = $(foreach dir,../res/sprites,$(notdir $(wildcard $(dir)/*.gbr)))
SPRITES_PNG = $(foreach dir,../res/sprites,$(notdir $(wildcard $(dir)/*.png)))
SGB_BORDERS = $(foreach dir,../res/borders,$(notdir $(wildcard $(dir)/*.png)))
ifeq ($(MUSIC_PLAYER), GBT_PLAYER)
	MUSICS_MOD = $(foreach dir,../res/music,$(notdir $(wildcard $(dir)/*.mod)))
else
	MUSICS_UGE = $(foreach dir,../res/music,$(notdir $(wildcard $(dir)/*.uge)))
endif
OBJS = $(GBMS:%.gbm=$(OBJDIR_RES)/%.gbm.o) $(GBRS:%.gbr=$(OBJDIR_RES)/%.gbr.o) $(SPRITES:%.gbr=$(OBJDIR_RES)/sprites/%.gbr.o) $(SPRITES_PNG:%.png=$(OBJDIR_RES)/sprites/%.png.o) $(SGB_BORDERS:%.png=$(OBJDIR_RES)/borders/%.png.o) $(PNGS:%.png=$(OBJDIR_RES)/%.png.o) $(MUSICS_MOD:%.mod=$(OBJDIR_RES)/%.mod.o) $(MUSICS_UGE:%.uge=$(OBJDIR_RES)/%.uge.o) $(ASMS:%.s=$(OBJDIR)/%.o) $(CLASSES:%.c=$(OBJDIR)/%.o)
OBJS_ZGB = $(ASMS_ZGB:%.s=$(OBJDIR_ZGB)/%.o) $(CLASSES_ZGB:%.c=$(OBJDIR_ZGB)/%.o) $(PLAT_AS_ZGB:%.s=$(OBJDIR_ZGB)/%.o) $(PLAT_C_ZGB:%.c=$(OBJDIR_ZGB)/%.o) $(OBJECTS_ZGB)

RELS = $(OBJS:%.o=%.rel)

#prevent gbr2c and gbm2c intermediate files from being deleted
.SECONDARY: $(GBMS:%.gbm=$(OBJDIR_RES)/%.gbm.c) $(GBRS:%.gbr=$(OBJDIR_RES)/%.gbr.c) $(SPRITES:%.gbr=$(OBJDIR_RES)/sprites/%.gbr.c) $(SPRITES_PNG:%.png=$(OBJDIR_RES)/sprites/%.png.c) $(SGB_BORDERS:%.png=$(OBJDIR_RES)/borders/%.png.c) $(PNGS:%.png=$(OBJDIR_RES)/%.png.c) $(MUSICS_MOD:%.mod=$(OBJDIR_RES)/%.mod.c) $(MUSICS_UGE:%.uge=$(OBJDIR_RES)/%.uge.c)

#dependencies -------------------------------------------------------------------------------------------
# option -MMD will generate .d files that can be included here for dependency checking (we can skip this on clean)
ifneq ($(MAKECMDGOALS),clean)
-include $(CLASSES:%.c=$(OBJDIR)/%.d) 
-include $(CLASSES_ZGB:%.c=$(OBJDIR_ZGB)/%.d)
-include $(PLAT_C_ZGB:%.c=$(OBJDIR_ZGB)/%.d)
endif
#---------------------------------------------------------------------------------------------------------

#folders---------------------------------------------
$(BINDIR):
	@echo Creating folder $(BINDIR)
	@mkdir $(BINDIR)
	
$(OBJDIR):
	@echo Creating folder $(OBJDIR)
	@mkdir $(OBJDIR)

$(OBJDIR_RES):
	@echo Creating folder $(OBJDIR_RES)
	@mkdir $(OBJDIR_RES)

$(OBJDIR_RES)/sprites:
	@echo Creating folder $(OBJDIR_RES)/sprites
	@mkdir $(OBJDIR_RES)/sprites

$(OBJDIR_RES)/borders:
	@echo Creating folder $(OBJDIR_RES)/borders
	@mkdir $(OBJDIR_RES)/borders

#resources---------------------------------------------
#a few notes of this rule (for future me)
#- SECONDEXPANSION is required to create an optional prerrequisite (meta doesn't exist the first time the sprite is created)
#- I have grouped GBR2PNG and PNG2MTSR in the same rule because the others rule had preference otherwise
#- $(@D) is the directory part of the target (http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables)
#- $(<F) is the filename without dir of the first prerrequisite
.SECONDEXPANSION:
$(OBJDIR_RES)/sprites/%.gbr.c: ../res/sprites/%.gbr $$(wildcard ../res/sprites/%.gbr.meta)
	@$(GBR2PNG) $< $(OBJDIR_RES)/sprites
	@$(PNG2ASSET) $(@D)/$(<F).png $(CFLAGSPNG2ASSET) `cat <$(@D)/$(<F).png.meta` -keep_palette_order -use_structs -c $@

.SECONDEXPANSION:
$(OBJDIR_RES)/sprites/%.png.c: ../res/sprites/%.png $$(wildcard ../res/sprites/%.png.meta)
	@$(PNG2ASSET) $< $(CFLAGSPNG2ASSET) `cat <$<.meta` -b 255 -use_structs -c $@

$(OBJDIR_RES)/%.gbm.c: ../res/%.gbm
	@$(GBM2C) $< $(OBJDIR_RES)

$(OBJDIR_RES)/%.gbr.c: ../res/%.gbr
	@$(GBR2C) $< $(OBJDIR_RES)

$(OBJDIR_RES)/borders/%.png.c: ../res/borders/%.png $(OBJDIR_RES)/borders
	@$(PNG2ASSET) $< -b 255 -map -bpp 4 -max_palettes 4 -use_map_attributes -use_structs -pack_mode sgb -c $@

$(OBJDIR_RES)/%.png.c: ../res/%.png $$(wildcard ../res/%.png.meta)
	@$(PNG2ASSET) $< -b 255 -map -noflip -use_structs $(if $(wildcard $<.meta),`cat <$<.meta`) -c $@

$(OBJDIR_RES)/%.mod.c: ../res/music/%.mod
	@$(MOD2GBT) $< $(basename $(basename $(notdir $<)))_mod 255 > /dev/null
	@mv output.c $@

$(OBJDIR_RES)/%.uge.c: ../res/music/%.uge
	@$(UGE2SOURCE) $< -b 255 $(basename $(basename $(notdir $<)))_uge $@

$(OBJDIR_RES)/%.o: $(OBJDIR_RES)/%.c
	@echo compiling resource $<
	@$(LCC) $(CFLAGS) -c -o $@ $<
	
#ZGB---------------------------------------------	
$(OBJDIR_ZGB):
	@echo Creating folder $(OBJDIR_ZGB)
	@mkdir $(OBJDIR_ZGB)

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/%.s
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/%.c
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/$(PLAT)/%.s
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/$(PLAT)/%.c
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/zgb.lib: $(OBJDIR_ZGB) $(OBJS_ZGB) 
	@echo creating zgb.lib    
	@rm -f $(OBJDIR_ZGB)/zgb.lib
# the use of SDAR utility is disabled because of the problems with the windows version
#	@$(SDAR) -q $@ $(OBJS_ZGB)
# fall back to the old style library which is just the object file list
	@if [ -n "$(OBJECTS_ZGB)" ] ; then \
		cp $(OBJECTS_ZGB) $(OBJDIR_ZGB)/ ; \
	fi
	@echo -e "$(subst $(subst ,, ),\n,$(notdir $(OBJS_ZGB)))" >> $@


#Project files------------------------------------
$(OBJDIR)/%.o: %.s
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: %.c
	@echo compiling $<
	@$(LCC) $(CFLAGS) -c -o $@ $<	

$(OBJDIR)/savegame.o: savegame.c
	@echo compiling savegame on SRAM bank 0
	@$(LCC) $(CFLAGS) -Wf-ba0 -c -o $@ $<

$(BINDIR)/$(PROJECT_NAME).$(EXTENSION): $(OBJDIR) $(OBJDIR_ZGB)/zgb.lib $(OBJDIR_RES) $(OBJDIR_RES)/sprites $(BINDIR) $(OBJS)
	@echo Linking
	@$(LCC) $(BINFLAGS) -Wl-k$(OBJDIR_ZGB)/ -Wl-lzgb.lib -o $(OBJDIR)/rom.$(EXTENSION) $(OBJS)
	@cp $(OBJDIR)/rom.$(EXTENSION) $(BINDIR)/$(PROJECT_NAME).$(EXTENSION)
	@cp $(OBJDIR)/rom.sym $(BINDIR)/$(PROJECT_NAME).sym
	@echo Done!

build_lib: $(OBJDIR) $(OBJS)

build_gb: $(OBJDIR)/Makefile.uptodate $(BINDIR)/$(PROJECT_NAME).$(EXTENSION)

$(OBJDIR)/Makefile.uptodate: Makefile
	@echo Makefile has been mofied, forcing a rebuild
	@make clean BUILD_TYPE=$(BUILD_TYPE)
	@mkdir -p $(OBJDIR)
	@touch $@

clean:
	@echo Cleaning $(PROJECT_NAME)
	@rm -rf $(BINDIR)
	@rm -rf $(OBJDIR_ZGB)
	@rm -rf $(OBJDIR_RES)
	@rm -rf $(OBJDIR)

run: all
	@if test -f $(BINDIR)/$(PROJECT_NAME).$(EXTENSION); then \
		echo Running $(BINDIR)/$(PROJECT_NAME).$(EXTENSION); \
		$(BGB) $(BINDIR)/$(PROJECT_NAME).$(EXTENSION); \
	fi
