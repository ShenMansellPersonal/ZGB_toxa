ZGB_PATH_UNIX := $(subst ',,$(subst \,/,'$(ZGB_PATH)'))
ifndef GBDK_HOME
	GBDK_HOME := $(ZGB_PATH_UNIX)/../env/gbdk
	PATH := $(ZGB_PATH_UNIX)/../env/make-3.81-bin/bin;$(ZGB_PATH_UNIX)/../env/gbdk/bin;$(ZGB_PATH_UNIX)/../env/msys/bin;$(PATH)
endif
GBDK_HOME_UNIX := $(subst ',,$(subst \,/,'$(GBDK_HOME)'))

#--- Default build will be release. Can be overiden passing BUILD_TYPE = debug as a parameter
ifndef BUILD_TYPE
	BUILD_TYPE = Release
endif

#--- Default sprite size is 8x16
ifeq ($(DEFAULT_SPRITES_SIZE), )
	DEFAULT_SPRITES_SIZE = SPRITES_8x16
endif

# TODO: Check if there are any more platform specific flags that can be centralized here
# Configure platform specific LCC flags here:
LCCFLAGS_gb      = #-Wm-ys -Wl-yt0x1B -autobank # Set an MBC for banking (1B-ROM+MBC5+RAM+BATT)
LCCFLAGS_pocket  = #-Wm-ys -Wl-yt0x1B -autobank # Usually the same as required for .gb
LCCFLAGS_duck    = -Wl-yt0x19 #-Wm-ys -Wl-yt0x1B -autobank # Usually the same as required for .gb
LCCFLAGS_gbc     = -Wm-yc -DCGB #-Wm-ys -Wl-yt0x1B -Wm-yc -autobank # Same as .gb with: -Wm-yc (gb & gbc) or Wm-yC (gbc exclusive)
LCCFLAGS_sms     = #-autobank
LCCFLAGS_gg      = #-autobank
LCCFLAGS_nes     = 

LCCFLAGS += $(LCCFLAGS_$(EXT)) # This adds the current platform specific LCC Flags

# Optional verbose output for lcc, linker and bankpack
# LCCFLAGS += -v -Wl-p -Wb-v

# Append current platform extension type to output and intermediate directories
OBJDIR = ../$(BUILD_TYPE)/$(EXT)
OBJDIR_RES = $(OBJDIR)/res
OBJDIR_ZGB = $(OBJDIR)/zgb
BINDIR = ../bin/$(EXT)

# See bottom of Makefile for directory auto-creation
MKDIRS = $(BINDIR) $(OBJDIR) $(OBJDIR_RES) $(OBJDIR_RES)/sprites $(OBJDIR_RES)/borders $(OBJDIR_ZGB)


LCC = $(GBDK_HOME_UNIX)/bin/lcc
SDAR = $(GBDK_HOME_UNIX)/bin/sdar
PNG2ASSET = $(GBDK_HOME_UNIX)/bin/png2asset

ifndef EMULATOR
	# The default emulator is Emulicious
	EMULATOR = $(ZGB_PATH_UNIX)/../env/emulicious/Emulicious
endif

GBR2C = $(ZGB_PATH_UNIX)/../tools/gbr2c/gbr2c
GBR2PNG = $(ZGB_PATH_UNIX)/../tools/gbr2png/gbr2png
GBM2C = $(ZGB_PATH_UNIX)/../tools/gbm2c/gbm2c
MOD2GBT = $(ZGB_PATH_UNIX)/../tools/mod2gbt/mod2gbt
UGE2SOURCE = $(ZGB_PATH_UNIX)/../env/uge2source

ADDR_gb = -Wl-g.STACK=0xDF00 -Wl-g_mirror_OAM=0xDF00 -Wl-g_font_recode_table=0xDFA0
ADDR_duck = $(ADDR_gb)
ADDR_ap = $(ADDR_gb)
ADDR_gg = -Wl-g.STACK=0xDEA0 -Wl-g_mirror_OAM=0xDF00 -Wl-g_font_recode_table=0xDEA0
ADDR_sms = $(ADDR_gg)

CFLAGS_gb = -DDEFAULT_COLOR_DEPTH=2
CFLAGS_duck = $(CFLAGS_gb)
CFLAGS_ap = $(CFLAGS_gb)
CFLAGS_gg = -DDEFAULT_COLOR_DEPTH=4
CFLAGS_sms = $(CFLAGS_gg)

#png2asset cross-platform defaults
PNG2ASSET_gg = -noflip -pack_mode sms -bpp 4
PNG2ASSET_sms = $(PNG2ASSET_gg)

CFLAGSPNG2ASSET += $(PNG2ASSET_$(PLAT))

CFLAGS += $(TARGET) -Wf-MMD $(BUILD_DEFS) -I../include -I$(ZGB_PATH_UNIX)/include -DFILE_NAME=$(basename $(<F)) $(CFLAGS_$(PLAT))

ifeq ($(strip $(N_BANKS)),)
	NBANKS = A
endif
BINFLAGS += $(TARGET) -Wl-j -Wm-yS -autobank -Wl-yo$(N_BANKS) -Wb-ext=.rel -Wb-reserve=1:1000 $(ADDR_$(PLAT))


# Moved a bunch of these to LCCFLAGS_* = ...
ifneq ($(strip $(PLAT)),duck)
	ifeq ($(wildcard savegame.c), )
		# No savegame
		BINFLAGS += -Wl-yt0x19
	else
		# Savegame
		BINFLAGS += -Wl-yt0x1B -Wl-ya1
		CFLAGS += -DUSE_SAVEGAME
	endif

	# TODO: consider changing this to a build target "gbc" and get rid of ReleaseColor?
	ifneq (,$(findstring Color,$(BUILD_TYPE)))
		BINFLAGS += -Wm-yc
		CFLAGS += -DCGB
		EXT = gbc
	endif

	# SGB flags
	ifneq ($(wildcard ../res/borders), )
		BINFLAGS +=-Wm-ys 
	endif
endif

# gbt-player/Hugetracker flags
ifeq ($(MUSIC_PLAYER), GBT_PLAYER)
	CFLAGS += -DMUSIC_DRIVER_GBT
else
	ifeq ($(MUSIC_PLAYER), HUGETRACKER)
		CFLAGS += -DMUSIC_DRIVER_HUGE
	endif
endif


ifeq ($(DEFAULT_SPRITES_SIZE), SPRITES_8x16)
	CFLAGSPNG2ASSET += -spr8x16
	CFLAGS += -DDEFAULT_SPRITES_SIZE=16
else
	CFLAGSPNG2ASSET += -spr8x8
	CFLAGS += -DDEFAULT_SPRITES_SIZE=8
endif

# Release/Debug flags
ifneq (,$(findstring Debug,$(BUILD_TYPE)))
	CFLAGS += -debug
	BINFLAGS += -debug
	PROJECT_NAME := $(PROJECT_NAME)_Debug
else
	CFLAGS += -Wf'--max-allocs-per-node 50000' -DNDEBUG
endif

current_dir = $(shell pwd)


ASMS_ZGB         = $(foreach dir,$(ZGB_PATH_UNIX)/src,$(notdir $(wildcard $(dir)/*.s)))
CLASSES_ZGB      = $(foreach dir,$(ZGB_PATH_UNIX)/src,$(notdir $(wildcard $(dir)/*.c)))
OBJECTS_ZGB      = $(foreach dir,$(ZGB_PATH_UNIX)/lib/$(PLAT),$(wildcard $(dir)/*.o))
PLAT_AS_ZGB      = $(foreach dir,$(ZGB_PATH_UNIX)/src/$(PLAT),$(notdir $(wildcard $(dir)/*.s)))
PLAT_C_ZGB       = $(foreach dir,$(ZGB_PATH_UNIX)/src/$(PLAT),$(notdir $(wildcard $(dir)/*.c)))
ASMS             = $(foreach dir,.,$(notdir $(wildcard $(dir)/*.s))) 
CLASSES          = $(foreach dir,.,$(notdir $(wildcard $(dir)/*.c))) 
GBRS             = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.gbr)))
GBMS             = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.gbm)))
PNGS             = $(foreach dir,../res,$(notdir $(wildcard $(dir)/*.png)))
SPRITES          = $(foreach dir,../res/sprites,$(notdir $(wildcard $(dir)/*.gbr)))
SPRITES_PNG      = $(foreach dir,../res/sprites,$(notdir $(wildcard $(dir)/*.png)))
SPRITES_PNG_PLAT = $(foreach dir,../res/sprites/$(PLAT),$(notdir $(wildcard $(dir)/*.png)))
ifneq ($(wildcard ../res/borders), )
	SGB_BORDERS = $(foreach dir,../res/borders,$(notdir $(wildcard $(dir)/*.png)))
endif
ifeq ($(MUSIC_PLAYER), GBT_PLAYER)
	MUSICS_MOD = $(foreach dir,../res/music,$(notdir $(wildcard $(dir)/*.mod)))
else
	ifeq ($(MUSIC_PLAYER), HUGETRACKER)
		MUSICS_UGE = $(foreach dir,../res/music,$(notdir $(wildcard $(dir)/*.uge)))
	endif
endif


OBJS = $(GBMS:%.gbm=$(OBJDIR_RES)/%.gbm.o) $(GBRS:%.gbr=$(OBJDIR_RES)/%.gbr.o) $(SPRITES:%.gbr=$(OBJDIR_RES)/sprites/%.gbr.o) $(SPRITES_PNG:%.png=$(OBJDIR_RES)/sprites/%.png.o) $(SPRITES_PNG_PLAT:%.png=$(OBJDIR_RES)/sprites/%.png.o) $(SGB_BORDERS:%.png=$(OBJDIR_RES)/borders/%.png.o) $(PNGS:%.png=$(OBJDIR_RES)/%.png.o) $(MUSICS_MOD:%.mod=$(OBJDIR_RES)/%.mod.o) $(MUSICS_UGE:%.uge=$(OBJDIR_RES)/%.uge.o) $(ASMS:%.s=$(OBJDIR)/%.o) $(CLASSES:%.c=$(OBJDIR)/%.o)
OBJS_ZGB = $(ASMS_ZGB:%.s=$(OBJDIR_ZGB)/%.o) $(CLASSES_ZGB:%.c=$(OBJDIR_ZGB)/%.o) $(PLAT_AS_ZGB:%.s=$(OBJDIR_ZGB)/%.o) $(PLAT_C_ZGB:%.c=$(OBJDIR_ZGB)/%.o) $(OBJECTS_ZGB)

RELS = $(OBJS:%.o=%.rel)

# TODO: re-enable and fix Makefile.uptodate on a per-target basis
BINS = $(BINDIR)/$(PROJECT_NAME).$(EXT) #$(OBJDIR)/Makefile.uptodate

#prevent gbr2c and gbm2c intermediate files from being deleted
.SECONDARY: $(GBMS:%.gbm=$(OBJDIR_RES)/%.gbm.c) $(GBRS:%.gbr=$(OBJDIR_RES)/%.gbr.c) $(SPRITES:%.gbr=$(OBJDIR_RES)/sprites/%.gbr.c) $(SPRITES_PNG:%.png=$(OBJDIR_RES)/sprites/%.png.c) $(SGB_BORDERS:%.png=$(OBJDIR_RES)/borders/%.png.c) $(PNGS:%.png=$(OBJDIR_RES)/%.png.c) $(MUSICS_MOD:%.mod=$(OBJDIR_RES)/%.mod.c) $(MUSICS_UGE:%.uge=$(OBJDIR_RES)/%.uge.c)

#dependencies -------------------------------------------------------------------------------------------
# option -MMD will generate .d files that can be included here for dependency checking (we can skip this on clean)
ifneq ($(MAKECMDGOALS),clean)
-include $(CLASSES:%.c=$(OBJDIR)/%.d) 
-include $(CLASSES_ZGB:%.c=$(OBJDIR_ZGB)/%.d)
-include $(PLAT_C_ZGB:%.c=$(OBJDIR_ZGB)/%.d)
endif
#---------------------------------------------------------------------------------------------------------


#resources---------------------------------------------
#a few notes of this rule (for future me)
#- SECONDEXPANSION is required to create an optional prerrequisite (meta doesn't exist the first time the sprite is created)
#- I have grouped GBR2PNG and PNG2MTSR in the same rule because the others rule had preference otherwise
#- $(@D) is the directory part of the target (http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables)
#- $(<F) is the filename without dir of the first prerrequisite
.SECONDEXPANSION:
$(OBJDIR_RES)/sprites/%.gbr.c: ../res/sprites/%.gbr $$(wildcard ../res/sprites/%.gbr.meta)
	@$(GBR2PNG) $< $(OBJDIR_RES)/sprites
	@$(PNG2ASSET) $(@D)/$(<F).png $(CFLAGSPNG2ASSET) `cat <$(@D)/$(<F).png.meta` -keep_palette_order -use_structs -c $@

.SECONDEXPANSION:
$(OBJDIR_RES)/sprites/%.png.c: ../res/sprites/%.png $$(wildcard ../res/sprites/%.png.meta)
	@$(PNG2ASSET) $< $(CFLAGSPNG2ASSET) `cat <$<.meta` -b 255 -use_structs -c $@

.SECONDEXPANSION:
$(OBJDIR_RES)/sprites/%.png.c: ../res/sprites/$(PLAT)/%.png $$(wildcard ../res/sprites/$(PLAT)/%.png.meta)
	@$(PNG2ASSET) $< $(CFLAGSPNG2ASSET) `cat <$<.meta` -b 255 -use_structs -c $@

$(OBJDIR_RES)/%.gbm.c: ../res/%.gbm
	@$(GBM2C) $< $(OBJDIR_RES)

$(OBJDIR_RES)/%.gbr.c: ../res/%.gbr
	@$(GBR2C) $< $(OBJDIR_RES)

$(OBJDIR_RES)/borders/%.png.c: ../res/borders/%.png $(OBJDIR_RES)/borders
	@$(PNG2ASSET) $< -b 255 -map -bpp 4 -max_palettes 4 -use_map_attributes -use_structs -pack_mode sgb -c $@

$(OBJDIR_RES)/%.png.c: ../res/%.png $$(wildcard ../res/%.png.meta)
	@$(PNG2ASSET) $< -b 255 -map -noflip -use_structs $(if $(wildcard $<.meta),`cat <$<.meta`) -c $@

$(OBJDIR_RES)/%.mod.c: ../res/music/%.mod
	@$(MOD2GBT) $< $(basename $(basename $(notdir $<)))_mod 255 > /dev/null
	@mv output.c $@

$(OBJDIR_RES)/%.uge.c: ../res/music/%.uge
	@$(UGE2SOURCE) $< -b 255 $(basename $(basename $(notdir $<)))_uge $@

$(OBJDIR_RES)/%.o: $(OBJDIR_RES)/%.c
	@echo compiling resource $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<
	
#ZGB---------------------------------------------	

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/%.s
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/%.c
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/$(PLAT)/%.s
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/%.o: $(ZGB_PATH_UNIX)/src/$(PLAT)/%.c
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR_ZGB)/zgb.lib: $(OBJDIR_ZGB) $(OBJS_ZGB) 
	@echo creating zgb.lib    
	@rm -f $(OBJDIR_ZGB)/zgb.lib
# the use of SDAR utility is disabled because of the problems with the windows version
	@for file in $(OBJS_ZGB) ; do \
		$(SDAR) -ru $@ $${file} ; \
	done
# fall back to the old style library which is just the object file list
#	@if [ -n "$(OBJECTS_ZGB)" ] ; then \
#		cp $(OBJECTS_ZGB) $(OBJDIR_ZGB)/ ; \
#	fi
#	@echo -e "$(subst $(subst ,, ),\n,$(notdir $(OBJS_ZGB)))" >> $@


#Project files------------------------------------
$(OBJDIR)/%.o: %.s
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<

$(OBJDIR)/%.o: %.c
	@echo compiling $<
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -c -o $@ $<	

$(OBJDIR)/savegame.o: savegame.c
	@echo compiling savegame on SRAM bank 0
	@$(LCC) $(LCCFLAGS) $(CFLAGS) -Wf-ba0 -c -o $@ $<

$(BINDIR)/$(PROJECT_NAME).$(EXT): $(OBJDIR) $(OBJDIR_ZGB)/zgb.lib $(OBJDIR_RES) $(OBJDIR_RES)/sprites $(BINDIR) $(OBJS)
	@echo Linking
	@$(LCC) $(LCCFLAGS) $(BINFLAGS) -Wl-k$(OBJDIR_ZGB)/ -Wl-lzgb.lib -o $(OBJDIR)/rom.$(EXT) $(OBJS)
	@cp $(OBJDIR)/rom.$(EXT) $(BINDIR)/$(PROJECT_NAME).$(EXT)
	@cp $(OBJDIR)/rom.sym $(BINDIR)/$(PROJECT_NAME).sym
	@if test -f "$(OBJDIR)/rom.cdb" ; then \
		cp $(OBJDIR)/rom.cdb $(BINDIR)/$(PROJECT_NAME).cdb ; \
	fi
	@echo Done!

build_lib: $(OBJDIR) $(OBJS)


# TODO: re-enable and fix Makefile.uptodate on a per-target basis (may need to alter dir creation some)
# $(OBJDIR)/Makefile.uptodate: Makefile
# 	@echo Makefile has been modified, forcing a rebuild
# 	@make clean BUILD_TYPE=$(BUILD_TYPE)
# 	@mkdir -p $(OBJDIR)
# 	@touch $@

clean:
	@echo Cleaning $(PROJECT_NAME)
	@for target in $(TARGETS); do \
		$(MAKE) $$target-clean; \
	done

run: all
	@if test -f $(BINDIR)/$(PROJECT_NAME).$(EXT); then \
		echo Running $(BINDIR)/$(PROJECT_NAME).$(EXT); \
		$(EMULATOR) $(BINDIR)/$(PROJECT_NAME).$(EXT); \
	fi

# Include available build targets
# include Makefile.targets
include $(ZGB_PATH)/src/Makefile.targets


# create necessary directories after Makefile is parsed but before build
# info prevents the command from being pasted into the makefile
ifneq ($(strip $(EXT)),)           # Only make the directories if EXT has been set by a target
$(info $(shell mkdir -p $(MKDIRS)))
endif
